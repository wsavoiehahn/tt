# Simplified serverless.yml that's compatible with your previous deployment

service: ai-call-center-evaluator

package:
  individually: true
  patterns:
    - lambda_function.py
    - 'app/**'
    - '!app/**/*.pyc'
    - '!app/**/__pycache__/**'
    - 'templates/**'
    - 'static/**'
    - '!node_modules/**'
    - '!.venv/**'
    - '!.serverless/**'
    - '!.pytest_cache/**'
    - '!tests/**'
    - '!websocket_handler.py'  # Exclude the old handler
    - '!app_func.py'

provider:
  name: aws
  runtime: python3.11
  region: ${opt:region, 'us-east-2'}
  stage: ${opt:stage, 'dev'}
  memorySize: 512
  timeout: 300  # Increased timeout for WebSocket connections
  logRetentionInDays: 30
  environment:
    STAGE: ${self:provider.stage}
    REGION: ${self:provider.region}
    OPENAI_API_KEY: ${ssm:/openai/api_key}
    TWILIO_ACCOUNT_SID: ${ssm:/twilio/account_sid}
    TWILIO_AUTH_TOKEN: ${ssm:/twilio/auth_token}
    TWILIO_PHONE_NUMBER: ${ssm:/twilio/phone_number}
    TARGET_PHONE_NUMBER: ${ssm:/twilio/target_phone_number}
    S3_BUCKET_NAME: ${self:custom.bucketName}
    WEBSOCKET_ENDPOINT: ${ssm:/ai-evaluator/websocket_endpoint}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - s3:GetObject
            - s3:PutObject
            - s3:ListBucket
          Resource:
            - arn:aws:s3:::${self:custom.bucketName}
            - arn:aws:s3:::${self:custom.bucketName}/*
            - arn:aws:s3:::ai-call-center-evaluator-config/*
        - Effect: Allow
          Action:
            - ssm:GetParameter
            - ssm:GetParameters
          Resource:
            - arn:aws:ssm:${self:provider.region}:*:parameter/openai/*
            - arn:aws:ssm:${self:provider.region}:*:parameter/twilio/*
            - arn:aws:ssm:${self:provider.region}:*:parameter/ai-evaluator/*
        - Effect: Allow
          Action:
            - dynamodb:DescribeTable
            - dynamodb:CreateTable
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:Query
            - dynamodb:Scan
          Resource: arn:aws:dynamodb:us-east-2:*:table/ai-call-center-evaluator-dev-tests
        # WebSocket permissions
        - Effect: Allow
          Action: 
            - execute-api:ManageConnections
            - execute-api:Invoke
          Resource: "*"

custom:
  pythonRequirements:
    dockerizePip: false
    slim: true
    layer: true
    pythonBin: python3.11
    layersDeploymentBucket: ${self:custom.bucketName}
    useDownloadCache: true
    useStaticCache: true
    zip: true
  bucketName: ai-call-center-evaluator-dev-storage
  apiGateway:
    shouldStartNameWithService: true
    binaryMediaTypes:
      - 'multipart/form-data'
      - 'application/octet-stream'  # Add this for binary WebSocket data

functions:
  api:
    handler: lambda_function.lambda_handler
    layers:
      - arn:aws:lambda:us-east-2:753488050735:layer:ai-call-center-evaluator-dev-python-requirements:12
    package:
      patterns:
        - lambda_function.py 
        - 'app/**'
        - 'templates/**'
        - 'static/**'
    events:
      - httpApi:
          path: /{proxy+}
          method: any
      - websocket:
          route: $connect
      - websocket:
          route: $disconnect
      - websocket:
          route: $default
    environment:
      PYTHONPATH: '.:/opt/python'

resources:
  Resources:
    WebsocketsApi:
      Type: AWS::ApiGatewayV2::Api
      Properties:
        Name: ${self:service}-ws
        ProtocolType: WEBSOCKET
        RouteSelectionExpression: "$request.body.action"
        
  Outputs:
    WebSocketApiId:
      Value: !Ref WebsocketsApi
    WebSocketApiEndpoint:
      Value:
        Fn::Join:
          - ""
          - - "wss://"
            - !Ref WebsocketsApi
            - ".execute-api."
            - ${self:provider.region}
            - ".amazonaws.com/"
            - ${self:provider.stage}

plugins:
  - serverless-python-requirements
  - serverless-dotenv-plugin